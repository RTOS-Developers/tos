<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\USER\Prj_TP502T\Obj\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\USER\Prj_TP502T\Obj\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed May 25 09:48:01 2016
<BR><P>
<H3>Maximum Stack Usage =       1384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task_M26 &rArr; QuectelM26_ShowSMS &rArr; QuectelM26_SendTextMsg &rArr; GBKToUniCode &rArr; GetUnicodeString &rArr; GetStringByFmt &rArr; vsprintf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[16e]">TOS_ContextSwitch</a>
 <LI><a href="#[16f]">TOS_SwitchToTask</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from board_driver.o(i.ADC3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32lib_include.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from board_driver.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from board_driver.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from board_driver.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from board_driver.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from board_driver.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from board_driver.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from board_driver.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from board_driver.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32lib_include.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from board_driver.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from board_driver.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from board_driver.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from board_driver.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from board_driver.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from board_driver.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from board_driver.o(i.FLASH_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from board_driver.o(i.FSMC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">Flash_ReadData</a> from appconfig.o(i.Flash_ReadData) referenced from appconfig.o(i.Load_AppConfig)
 <LI><a href="#[53]">Flash_WriteData</a> from appconfig.o(i.Flash_WriteData) referenced from appconfig.o(i.Save_AppConfig)
 <LI><a href="#[49]">GPIO_InitList</a> from board_driver.o(i.GPIO_InitList) referenced from main.o(i.DeviceMount_IO)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32lib_include.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from board_driver.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from board_driver.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from board_driver.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from board_driver.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">ISL1208_IOCONTROL</a> from main.o(i.ISL1208_IOCONTROL) referenced from main.o(i.ISL1208_ReadReg)
 <LI><a href="#[51]">ISL1208_IOCONTROL</a> from main.o(i.ISL1208_IOCONTROL) referenced from main.o(i.ISL1208_WriteReg)
 <LI><a href="#[4a]">ISL1208_Init</a> from main.o(i.ISL1208_Init) referenced from main.o(i.DeviceMount_ISL1208)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32lib_include.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32lib_include.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from board_driver.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32lib_include.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from board_driver.o(i.RCC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from board_driver.o(i.RTCAlarm_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from board_driver.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from board_driver.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from board_driver.o(i.SPI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">SPI_FLASH_Init</a> from main.o(i.SPI_FLASH_Init) referenced from main.o(i.DeviceMount_W25Q16)
 <LI><a href="#[6]">SVC_Handler</a> from stm32lib_include.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">Sensor_Command</a> from main.o(i.Sensor_Command) referenced from main.o(.constdata)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32lib_include.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from stm32lib_include.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[5a]">System_Reset</a> from main.o(i.System_Reset) referenced from main.o(.constdata)
 <LI><a href="#[54]">System_ResetDelay</a> from main.o(i.System_ResetDelay) referenced from main.o(i.System_Reset)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from board_driver.o(i.TAMPER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from board_driver.o(i.TIM1_BRK_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from board_driver.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from board_driver.o(i.TIM1_TRG_COM_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from board_driver.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from board_driver.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from board_driver.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from board_driver.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from board_driver.o(i.TIM8_BRK_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from board_driver.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from board_driver.o(i.TIM8_TRG_COM_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from board_driver.o(i.TIM8_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">Task0</a> from main.o(i.Task0) referenced from main.o(.constdata)
 <LI><a href="#[5d]">TaskPlan</a> from main.o(i.TaskPlan) referenced from main.o(.constdata)
 <LI><a href="#[5f]">Task_Arrary</a> from func_face.o(i.Task_Arrary) referenced from main.o(.constdata)
 <LI><a href="#[60]">Task_HistoryRecord</a> from main.o(i.Task_HistoryRecord) referenced from main.o(.constdata)
 <LI><a href="#[59]">Task_LoadConfigs</a> from main.o(i.Task_LoadConfigs) referenced from main.o(.constdata)
 <LI><a href="#[5e]">Task_M26</a> from main.o(i.Task_M26) referenced from main.o(.constdata)
 <LI><a href="#[58]">Task_SaveConfigs</a> from main.o(i.Task_SaveConfigs) referenced from main.o(.constdata)
 <LI><a href="#[56]">Tos_RootTask</a> from tos.o(i.Tos_RootTask) referenced from tos.o(i.Tos_Start)
 <LI><a href="#[55]">Tos_TimerScan</a> from tos_timer.o(i.Tos_TimerScan) referenced from tos.o(i.Tos_Init)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart_driver.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart_driver.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from usart_driver.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">USART_Configuration</a> from usart_driver.o(i.USART_Configuration) referenced from usart_driver.o(i.DeviceMount_Usart)
 <LI><a href="#[4d]">USART_Read</a> from usart_driver.o(i.USART_Read) referenced from usart_driver.o(i.DeviceMount_Usart)
 <LI><a href="#[4c]">USART_Write</a> from usart_driver.o(i.USART_Write) referenced from usart_driver.o(i.DeviceMount_Usart)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32lib_include.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32lib_include.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">W25Q16_StdRead</a> from main.o(i.W25Q16_StdRead) referenced from main.o(i.DeviceMount_W25Q16)
 <LI><a href="#[4f]">W25Q16_StdWrite</a> from main.o(i.W25Q16_StdWrite) referenced from main.o(i.DeviceMount_W25Q16)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from board_driver.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[57]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[18e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[61]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[190]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[191]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[192]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[193]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAckCount
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringToNumber
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GetFloat
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringToNumber
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_GetATR
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GetFloat
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringToNumber
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringToNumber
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GetFloat
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Enter
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_GetATR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Enter
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringToNumber
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendMsg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PrintfHistory
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUI_GetOptionString
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringToNumber
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GetFloat
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GetFloat
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[197]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[198]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[199]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[64]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[6d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[62]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[19b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>TOS_ContextSwitch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tos_core_a.o(TOS_CORE_A))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskRun
</UL>

<P><STRONG><a name="[16f]"></a>TOS_SwitchToTask</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tos_core_a.o(TOS_CORE_A))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskStart
</UL>

<P><STRONG><a name="[7f]"></a>ADC1_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ADC1_Init &rArr; ADC1_Mode_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPlan
</UL>

<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.ADC3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC3_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32lib_include.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[87]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32lib_include.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[8c]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32lib_include.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[8a]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32lib_include.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[84]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32lib_include.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[86]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32lib_include.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[89]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32lib_include.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[8d]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32lib_include.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[8b]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32lib_include.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[8f]"></a>BOOL_LoadConfigs</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.BOOL_LoadConfigs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BOOL_LoadConfigs &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_AppConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LoadConfigs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoReg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0_Init
</UL>

<P><STRONG><a name="[168]"></a>BareDelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, board_driver.o(i.BareDelay))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
</UL>

<P><STRONG><a name="[fb]"></a>Bcd_Decimal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, text.o(i.Bcd_Decimal))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_GetDateTime
</UL>

<P><STRONG><a name="[149]"></a>BinarySearch</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, main.o(i.BinarySearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToGBK
</UL>

<P><STRONG><a name="[98]"></a>BufferCoppy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, text.o(i.BufferCoppy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BufferCoppy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_CreateMsg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskPutQmsg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Record
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_HistoryRecord
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_CreateCFG
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDU_GetCenterNumber
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUI_GetOptionString
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Enter
</UL>

<P><STRONG><a name="[d6]"></a>BufferFill</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, text.o(i.BufferFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BufferFill
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ReadShow
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetValue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetNumString
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAckCount
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckTwo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Ack
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32lib_include.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>COM_Menu_Enter</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, main.o(i.COM_Menu_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = COM_Menu_Enter &rArr; GetStringToNumber &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strstr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringToNumber
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_OptionLength
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[99]"></a>COM_Menu_Load</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.COM_Menu_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = COM_Menu_Load &rArr; MUI_GetOptionString &rArr; FmtToBuf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_OptionLength
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUI_GetOptionString
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[110]"></a>CheckCallNumber</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.CheckCallNumber))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDU_GetCenterNumber
</UL>

<P><STRONG><a name="[13e]"></a>ClearWithBuffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, text.o(i.ClearWithBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[9c]"></a>DHT11_Check</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.DHT11_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT11_Check &rArr; DHT11_PortIN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_PortIN
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_DelayUs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>

<P><STRONG><a name="[a9]"></a>DHT11_DelayMs</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.DHT11_DelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[9e]"></a>DHT11_DelayUs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.DHT11_DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>

<P><STRONG><a name="[a0]"></a>DHT11_GetFloat</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(i.DHT11_GetFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DHT11_GetFloat &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>

<P><STRONG><a name="[9d]"></a>DHT11_PortIN</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.DHT11_PortIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_PortIN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>

<P><STRONG><a name="[a3]"></a>DHT11_PortOUT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.DHT11_PortOUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[a4]"></a>DHT11_Read</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, main.o(i.DHT11_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DHT11_Read &rArr; DHT11_GetFloat &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GetFloat
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Value
</UL>

<P><STRONG><a name="[a7]"></a>DHT11_Read_Bit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.DHT11_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHT11_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_DelayUs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
</UL>

<P><STRONG><a name="[a6]"></a>DHT11_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.DHT11_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHT11_Read_Byte &rArr; DHT11_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>

<P><STRONG><a name="[a5]"></a>DHT11_Rst</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.DHT11_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT11_Rst &rArr; DHT11_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_PortOUT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_DelayUs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_DelayMs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA2_Channel1_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA2_Channel2_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA2_Channel3_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32lib_include.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[81]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32lib_include.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[82]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32lib_include.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[ab]"></a>DS18B20_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.DS18B20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS18B20_Init &rArr; DS_Rst &rArr; DS_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Rst
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Check
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Value
</UL>

<P><STRONG><a name="[ad]"></a>DS_Check</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.DS_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS_Check &rArr; DS_PortIN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_PortIN
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_DelayUs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[af]"></a>DS_DelayUs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.DS_DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write_Byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Rst
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Bit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Check
</UL>

<P><STRONG><a name="[b0]"></a>DS_Get_Temp</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, main.o(i.DS_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DS_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tools_GetCRC8
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write_Byte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Start
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Rst
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Byte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Value
</UL>

<P><STRONG><a name="[ae]"></a>DS_PortIN</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.DS_PortIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS_PortIN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Bit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Check
</UL>

<P><STRONG><a name="[b6]"></a>DS_PortOUT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.DS_PortOUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write_Byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Rst
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Bit
</UL>

<P><STRONG><a name="[b7]"></a>DS_Read_Bit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.DS_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS_Read_Bit &rArr; DS_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_PortOUT
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_PortIN
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_DelayUs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Byte
</UL>

<P><STRONG><a name="[b3]"></a>DS_Read_Byte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.DS_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS_Read_Byte &rArr; DS_Read_Bit &rArr; DS_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
</UL>

<P><STRONG><a name="[b8]"></a>DS_Read_Value</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, main.o(i.DS_Read_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DS_Read_Value &rArr; DS_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTH11_SetPort
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_SetPort
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPlan
</UL>

<P><STRONG><a name="[ac]"></a>DS_Rst</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.DS_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS_Rst &rArr; DS_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_PortOUT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_DelayUs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[ba]"></a>DS_SetPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.DS_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Value
</UL>

<P><STRONG><a name="[b1]"></a>DS_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.DS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS_Start &rArr; DS_Write_Byte &rArr; DS_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write_Byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Rst
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
</UL>

<P><STRONG><a name="[b2]"></a>DS_Write_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.DS_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS_Write_Byte &rArr; DS_PortOUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_PortOUT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_DelayUs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
</UL>

<P><STRONG><a name="[b9]"></a>DTH11_SetPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.DTH11_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Value
</UL>

<P><STRONG><a name="[8e]"></a>DeBug</STRONG> (Thumb, 334 bytes, Stack size 64 bytes, debug.o(i.DeBug))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEndingAppend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mema_Free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Ok
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar_List
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mema_Malloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceList_Printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_TosInfor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_TaskInfor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_LockCode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_BoardInfor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_EraseThis
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendMsg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PrintfHistory
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_HistoryRecord
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CleanHistory
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendHead
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegServer_Connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ReadShow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetCSQ
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ConnectNet
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Connect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26Printf_Bytes
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDU_GetCenterNumber
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Connect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_LoadConfigs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_SysTick
</UL>

<P><STRONG><a name="[155]"></a>DeBug_Drop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, debug.o(i.DeBug_Drop))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PrintfHistory
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CleanHistory
</UL>

<P><STRONG><a name="[153]"></a>DeBug_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, debug.o(i.DeBug_Get))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PrintfHistory
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CleanHistory
</UL>

<P><STRONG><a name="[14d]"></a>DeBug_OutSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(i.DeBug_OutSet))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0_Init
</UL>

<P><STRONG><a name="[141]"></a>DeBug_SetType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(i.DeBug_SetType))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32lib_include.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>Decimal_Bcd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, text.o(i.Decimal_Bcd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_SetDateTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_SetAlarm
</UL>

<P><STRONG><a name="[c1]"></a>DeviceList_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tos_device.o(i.DeviceList_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeviceList_Init &rArr; Mema_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mema_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>DeviceList_Printf</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tos_device.o(i.DeviceList_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DeviceList_Printf &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
</UL>

<P><STRONG><a name="[18c]"></a>DeviceMount_IO</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, main.o(i.DeviceMount_IO))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>DeviceMount_ISL1208</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, main.o(i.DeviceMount_ISL1208))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>DeviceMount_Usart</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, usart_driver.o(i.DeviceMount_Usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceMount_Usart &rArr; Mema_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mema_Malloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>DeviceMount_W25Q16</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, main.o(i.DeviceMount_W25Q16))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>Device_Init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, tos_device.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Device_Init &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_RootTask
</UL>

<P><STRONG><a name="[bf]"></a>Device_Ok</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_device.o(i.Device_Ok))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_driver.o(i.EXTI0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Reset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI15_10_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI2_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI3_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI4_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI9_5_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32lib_include.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32lib_include.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[cb]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32lib_include.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.FLASH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FLASH_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32lib_include.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[ca]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32lib_include.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[ce]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32lib_include.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[c9]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32lib_include.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.FSMC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FSMC_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>FindHexFromString</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, text.o(i.FindHexFromString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindHexFromString &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
</UL>

<P><STRONG><a name="[cd]"></a>FindNumFromString</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, text.o(i.FindNumFromString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindNumFromString &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PragmDateTime
</UL>

<P><STRONG><a name="[52]"></a>Flash_ReadData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, appconfig.o(i.Flash_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appconfig.o(i.Load_AppConfig)
</UL>
<P><STRONG><a name="[53]"></a>Flash_WriteData</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, appconfig.o(i.Flash_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appconfig.o(i.Save_AppConfig)
</UL>
<P><STRONG><a name="[142]"></a>Float32FromByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, text.o(i.Float32FromByte))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[140]"></a>Float32ToByte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, text.o(i.Float32ToByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Float32ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[159]"></a>FlowPoolFilter</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, text.o(i.FlowPoolFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlowPoolFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_ComputeCPURate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
</UL>

<P><STRONG><a name="[d0]"></a>FmtToBuf</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, text.o(i.FmtToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FmtToBuf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegServer_Connect
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Connect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUI_GetOptionString
</UL>

<P><STRONG><a name="[d1]"></a>GBKToString</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, main.o(i.GBKToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GBKToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBKToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBKToUniCode
</UL>

<P><STRONG><a name="[d3]"></a>GBKToUniCode</STRONG> (Thumb, 32 bytes, Stack size 528 bytes, main.o(i.GBKToUniCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = GBKToUniCode &rArr; GetUnicodeString &rArr; GetStringByFmt &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnicodeString
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBKToString
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
</UL>

<P><STRONG><a name="[d2]"></a>GBKToUnicode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.GBKToUnicode))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBKToString
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32lib_include.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_InitAll
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitList
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_PortOUT
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_PortIN
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_PortOUT
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_PortIN
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
</UL>

<P><STRONG><a name="[49]"></a>GPIO_InitList</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, board_driver.o(i.GPIO_InitList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_InitList &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.DeviceMount_IO)
</UL>
<P><STRONG><a name="[9f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32lib_include.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_IOCONTROL
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Bit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Check
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32lib_include.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_IOCONTROL
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_WriteReg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621Wr_Data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write_Byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Rst
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Bit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[aa]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32lib_include.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_InitAll
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_IOCONTROL
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_WriteReg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621Wr_Data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write_Byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Rst
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Bit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[d5]"></a>GPRS_Ack</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, main.o(i.GPRS_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GPRS_Ack &rArr; USART_ReadDatas &rArr; Tos_TaskGetDev &rArr; Tos_WaitDev &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strstr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFill
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
</UL>

<P><STRONG><a name="[d8]"></a>GPRS_AckDelay</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.GPRS_AckDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GPRS_AckDelay &rArr; USART_ReadDatas &rArr; Tos_TaskGetDev &rArr; Tos_WaitDev &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendHead
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendHeartbeat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
</UL>

<P><STRONG><a name="[db]"></a>GPRS_AckTwo</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(i.GPRS_AckTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GPRS_AckTwo &rArr; USART_ReadDatas &rArr; Tos_TaskGetDev &rArr; Tos_WaitDev &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strstr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFill
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_WhileAck
</UL>

<P><STRONG><a name="[e0]"></a>GPRS_CheckIpTrue</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, text.o(i.GPRS_CheckIpTrue))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Connect
</UL>

<P><STRONG><a name="[dc]"></a>GPRS_CommandAck</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i.GPRS_CommandAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GPRS_CommandAck &rArr; GPRS_CommandAckCount &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAckCount
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_InitSMS
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ConnectNet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Connect
</UL>

<P><STRONG><a name="[dd]"></a>GPRS_CommandAckCount</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(i.GPRS_CommandAckCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = GPRS_CommandAckCount &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ConnectNet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAck
</UL>

<P><STRONG><a name="[df]"></a>GPRS_Connect</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, main.o(i.GPRS_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GPRS_Connect &rArr; GPRS_CommandAck &rArr; GPRS_CommandAckCount &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CheckIpTrue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_WhileAck
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAck
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegServer_Connect
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Connect
</UL>

<P><STRONG><a name="[e2]"></a>GPRS_Printf</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.GPRS_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GPRS_Printf &rArr; QuectelM26Printf_Bytes &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26Printf_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendHead
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendHeartbeat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
</UL>

<P><STRONG><a name="[e1]"></a>GPRS_WhileAck</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(i.GPRS_WhileAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GPRS_WhileAck &rArr; GPRS_AckTwo &rArr; USART_ReadDatas &rArr; Tos_TaskGetDev &rArr; Tos_WaitDev &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckTwo
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Connect
</UL>

<P><STRONG><a name="[bd]"></a>GetChar_List</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, debug.o(i.GetChar_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetChar_List
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>

<P><STRONG><a name="[e4]"></a>GetCodeStr16</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, main.o(i.GetCodeStr16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetCodeStr16
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToHex64
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
</UL>

<P><STRONG><a name="[148]"></a>GetHexFromString</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, text.o(i.GetHexFromString))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToGBK
</UL>

<P><STRONG><a name="[e6]"></a>GetStringByFmt</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, text.o(i.GetStringByFmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetStringByFmt &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendMsg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendHead
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PragmDateTime
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnicodeString
</UL>

<P><STRONG><a name="[94]"></a>GetStringToNumber</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, text.o(i.GetStringToNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetStringToNumber &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Enter
</UL>

<P><STRONG><a name="[9b]"></a>GetTextLength</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, text.o(i.GetTextLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetTextLength
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEndingAppend
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNumFromString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindHexFromString
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToGBK
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Load
</UL>

<P><STRONG><a name="[118]"></a>GetTosTask_Count</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tools.o(i.GetTosTask_Count))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_TaskInfor
</UL>

<P><STRONG><a name="[d4]"></a>GetUnicodeString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.GetUnicodeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetUnicodeString &rArr; GetStringByFmt &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBKToUniCode
</UL>

<P><STRONG><a name="[10d]"></a>GetWordFromBytes</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, text.o(i.GetWordFromBytes))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Expend
</UL>

<P><STRONG><a name="[13f]"></a>Get_FlashSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tools.o(i.Get_FlashSize))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[e8]"></a>Get_Mon</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, main.o(i.Get_Mon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Mon &rArr; Strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PragmDateTime
</UL>

<P><STRONG><a name="[e9]"></a>Get_PragmDateTime</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(i.Get_PragmDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_PragmDateTime &rArr; GetStringByFmt &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNumFromString
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mon
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32lib_include.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>Ht1621Wr_Data</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.Ht1621Wr_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ht1621Wr_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_Delay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_WriteReg
</UL>

<P><STRONG><a name="[eb]"></a>Ht1621_Delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.Ht1621_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_WriteReg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621Wr_Data
</UL>

<P><STRONG><a name="[ec]"></a>Ht1621_ShowASCII</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.Ht1621_ShowASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ht1621_ShowASCII &rArr; Ht1621_WriteReg &rArr; Ht1621Wr_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[ed]"></a>Ht1621_WriteReg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(i.Ht1621_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ht1621_WriteReg &rArr; Ht1621Wr_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_Delay
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621Wr_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_ShowASCII
</UL>

<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C1_ER_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C1_EV_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.I2C2_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C2_ER_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C2_EV_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>I2C_Drop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_driver.o(i.I2C_Drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Drop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDatas
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDatas
</UL>

<P><STRONG><a name="[ee]"></a>I2C_ReadDatas</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, i2c_driver.o(i.I2C_ReadDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_ReadDatas &rArr; I2C_RecvBytes &rArr; I2C_SendAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendBytes
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Drop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_ReadReg
</UL>

<P><STRONG><a name="[f2]"></a>I2C_RecvBytes</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, i2c_driver.o(i.I2C_RecvBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_RecvBytes &rArr; I2C_SendAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDatas
</UL>

<P><STRONG><a name="[f5]"></a>I2C_SendAck</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2c_driver.o(i.I2C_SendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SendAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvBytes
</UL>

<P><STRONG><a name="[f0]"></a>I2C_SendBytes</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, i2c_driver.o(i.I2C_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDatas
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDatas
</UL>

<P><STRONG><a name="[ef]"></a>I2C_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c_driver.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDatas
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDatas
</UL>

<P><STRONG><a name="[f3]"></a>I2C_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c_driver.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDatas
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDatas
</UL>

<P><STRONG><a name="[f6]"></a>I2C_WriteDatas</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, i2c_driver.o(i.I2C_WriteDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_WriteDatas &rArr; I2C_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Drop
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_WriteReg
</UL>

<P><STRONG><a name="[f7]"></a>IO_Set</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.IO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBigShow
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0
</UL>

<P><STRONG><a name="[f8]"></a>ISL1208_GetATR</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(i.ISL1208_GetATR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ISL1208_GetATR &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_Init
</UL>

<P><STRONG><a name="[f9]"></a>ISL1208_GetDateTime</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main.o(i.ISL1208_GetDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ISL1208_GetDateTime &rArr; ISL1208_ReadReg &rArr; I2C_ReadDatas &rArr; I2C_RecvBytes &rArr; I2C_SendAck
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd_Decimal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPlan
</UL>

<P><STRONG><a name="[51]"></a>ISL1208_IOCONTROL</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, main.o(i.ISL1208_IOCONTROL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ISL1208_IOCONTROL
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.ISL1208_ReadReg)
<LI> main.o(i.ISL1208_WriteReg)
</UL>
<P><STRONG><a name="[4a]"></a>ISL1208_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, main.o(i.ISL1208_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ISL1208_Init &rArr; ISL1208_SetAlarm &rArr; ISL1208_WriteReg &rArr; I2C_WriteDatas &rArr; I2C_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitList
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_WriteReg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_SetAlarm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_ReadReg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_GetATR
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPlan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.DeviceMount_ISL1208)
</UL>
<P><STRONG><a name="[fa]"></a>ISL1208_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, main.o(i.ISL1208_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ISL1208_ReadReg &rArr; I2C_ReadDatas &rArr; I2C_RecvBytes &rArr; I2C_SendAck
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_GetDateTime
</UL>

<P><STRONG><a name="[fd]"></a>ISL1208_SetAlarm</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, main.o(i.ISL1208_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ISL1208_SetAlarm &rArr; ISL1208_WriteReg &rArr; I2C_WriteDatas &rArr; I2C_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decimal_Bcd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_Init
</UL>

<P><STRONG><a name="[ff]"></a>ISL1208_SetDateTime</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(i.ISL1208_SetDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ISL1208_SetDateTime &rArr; ISL1208_WriteReg &rArr; I2C_WriteDatas &rArr; I2C_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decimal_Bcd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[fc]"></a>ISL1208_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(i.ISL1208_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ISL1208_WriteReg &rArr; I2C_WriteDatas &rArr; I2C_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_SetDateTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_SetAlarm
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_Init
</UL>

<P><STRONG><a name="[100]"></a>IWDG_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, board_driver.o(i.IWDG_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_RootTask
</UL>

<P><STRONG><a name="[105]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32lib_include.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[104]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32lib_include.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_RootTask
</UL>

<P><STRONG><a name="[102]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32lib_include.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[103]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32lib_include.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[101]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32lib_include.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[90]"></a>Load_AppConfig</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, appconfig.o(i.Load_AppConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Load_AppConfig &rArr; Load_VoidConfig &rArr; Tools_GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_VoidConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_LoadConfigs
</UL>

<P><STRONG><a name="[106]"></a>Load_VoidConfig</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, appconfig.o(i.Load_VoidConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Load_VoidConfig &rArr; Tools_GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tools_GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_AppConfig
</UL>

<P><STRONG><a name="[c7]"></a>MCU_Reset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board_driver.o(i.MCU_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ResetDelay
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_SysTick
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[125]"></a>MQTT_LegnthToByte</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, text.o(i.MQTT_LegnthToByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTT_LegnthToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
</UL>

<P><STRONG><a name="[9a]"></a>MUI_GetOptionString</STRONG> (Thumb, 396 bytes, Stack size 136 bytes, main.o(i.MUI_GetOptionString))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MUI_GetOptionString &rArr; FmtToBuf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_RGB
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCoppy
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FmtToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Load
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32lib_include.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>Mema_Count</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_mema.o(i.Mema_Count))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_TosInfor
</UL>

<P><STRONG><a name="[c0]"></a>Mema_Free</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tos_mema.o(i.Mema_Free))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>

<P><STRONG><a name="[18a]"></a>Mema_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_mema.o(i.Mema_Init))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>Mema_Malloc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tos_mema.o(i.Mema_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mema_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMount_Usart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskCreate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceList_Init
</UL>

<P><STRONG><a name="[92]"></a>Menu_OptionLength</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.Menu_OptionLength))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Load
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Enter
</UL>

<P><STRONG><a name="[13d]"></a>ModBus_Create</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, modbus.o(i.ModBus_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ModBus_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[10a]"></a>ModBus_CreateMsg</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, modbus.o(i.ModBus_CreateMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ModBus_CreateMsg &rArr; Tools_GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tools_GetXOR8
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tools_GetCRC16
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[10c]"></a>ModBus_Expend</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, modbus.o(i.ModBus_Expend))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ModBus_Expend &rArr; Tools_GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tools_GetXOR8
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tools_GetCRC16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordFromBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32lib_include.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32lib_include.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigurationAll
</UL>

<P><STRONG><a name="[17c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32lib_include.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigurationAll
</UL>

<P><STRONG><a name="[189]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32lib_include.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>PDU_GetCenterNumber</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, main.o(i.PDU_GetCenterNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = PDU_GetCenterNumber &rArr; QuectelM26_GetNumString &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetNumString
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCallNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PVD_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32lib_include.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>Printf_BoardInfor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tools.o(i.Printf_BoardInfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Printf_BoardInfor &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
</UL>

<P><STRONG><a name="[114]"></a>Printf_LcdType</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tools.o(i.Printf_LcdType))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
</UL>

<P><STRONG><a name="[112]"></a>Printf_LockCode</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tools.o(i.Printf_LockCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Printf_LockCode &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
</UL>

<P><STRONG><a name="[116]"></a>Printf_NandInfor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tools.o(i.Printf_NandInfor))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
</UL>

<P><STRONG><a name="[113]"></a>Printf_SysInfor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tools.o(i.Printf_SysInfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Printf_SysInfor &rArr; Printf_LockCode &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceList_Printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_TosInfor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_TaskInfor
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_NandInfor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_LockCode
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_LcdType
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_BoardInfor
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0_Init
</UL>

<P><STRONG><a name="[115]"></a>Printf_TaskInfor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tools.o(i.Printf_TaskInfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Printf_TaskInfor &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTosTask_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
</UL>

<P><STRONG><a name="[117]"></a>Printf_TosInfor</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tools.o(i.Printf_TosInfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Printf_TosInfor &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mema_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
</UL>

<P><STRONG><a name="[e3]"></a>QuectelM26Printf_Bytes</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.QuectelM26Printf_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = QuectelM26Printf_Bytes &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendHeartbeat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
</UL>

<P><STRONG><a name="[11a]"></a>QuectelM26_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.QuectelM26_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = QuectelM26_Config &rArr; QuectelM26_SendCFG &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[11c]"></a>QuectelM26_Connect</STRONG> (Thumb, 42 bytes, Stack size 104 bytes, main.o(i.QuectelM26_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = QuectelM26_Connect &rArr; GPRS_Connect &rArr; GPRS_CommandAck &rArr; GPRS_CommandAckCount &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FmtToBuf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[11d]"></a>QuectelM26_ConnectNet</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, main.o(i.QuectelM26_ConnectNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = QuectelM26_ConnectNet &rArr; QuectelM26_GetCSQ &rArr; QuectelM26_GetValue &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetCSQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAckCount
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAck
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Init
</UL>

<P><STRONG><a name="[11f]"></a>QuectelM26_CreateCFG</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, main.o(i.QuectelM26_CreateCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QuectelM26_CreateCFG &rArr; BufferCoppy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
</UL>

<P><STRONG><a name="[11e]"></a>QuectelM26_GetCSQ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.QuectelM26_GetCSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = QuectelM26_GetCSQ &rArr; QuectelM26_GetValue &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ConnectNet
</UL>

<P><STRONG><a name="[10f]"></a>QuectelM26_GetNumString</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, main.o(i.QuectelM26_GetNumString))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = QuectelM26_GetNumString &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFill
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDU_GetCenterNumber
</UL>

<P><STRONG><a name="[120]"></a>QuectelM26_GetValue</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, main.o(i.QuectelM26_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = QuectelM26_GetValue &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFill
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetCSQ
</UL>

<P><STRONG><a name="[121]"></a>QuectelM26_Init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, main.o(i.QuectelM26_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = QuectelM26_Init &rArr; QuectelM26_ConnectNet &rArr; QuectelM26_GetCSQ &rArr; QuectelM26_GetValue &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ConnectNet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAck
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[122]"></a>QuectelM26_InitSMS</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.QuectelM26_InitSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = QuectelM26_InitSMS &rArr; GPRS_CommandAck &rArr; GPRS_CommandAckCount &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAck
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
</UL>

<P><STRONG><a name="[123]"></a>QuectelM26_ReadShow</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.QuectelM26_ReadShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = QuectelM26_ReadShow &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFill
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
</UL>

<P><STRONG><a name="[11b]"></a>QuectelM26_SendCFG</STRONG> (Thumb, 230 bytes, Stack size 208 bytes, main.o(i.QuectelM26_SendCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = QuectelM26_SendCFG &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_CreateCFG
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Config
</UL>

<P><STRONG><a name="[124]"></a>QuectelM26_SendData</STRONG> (Thumb, 608 bytes, Stack size 544 bytes, main.o(i.QuectelM26_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = QuectelM26_SendData &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_LegnthToByte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[126]"></a>QuectelM26_SendHeartbeat</STRONG> (Thumb, 178 bytes, Stack size 208 bytes, main.o(i.QuectelM26_SendHeartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = QuectelM26_SendHeartbeat &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCoppy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26Printf_Bytes
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[127]"></a>QuectelM26_SendTextMsg</STRONG> (Thumb, 164 bytes, Stack size 440 bytes, main.o(i.QuectelM26_SendTextMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = QuectelM26_SendTextMsg &rArr; GBKToUniCode &rArr; GetUnicodeString &rArr; GetStringByFmt &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_InitSMS
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBKToUniCode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCallNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendMsg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
</UL>

<P><STRONG><a name="[129]"></a>QuectelM26_ShowSMS</STRONG> (Thumb, 396 bytes, Stack size 344 bytes, main.o(i.QuectelM26_ShowSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = QuectelM26_ShowSMS &rArr; QuectelM26_SendTextMsg &rArr; GBKToUniCode &rArr; GetUnicodeString &rArr; GetStringByFmt &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strstr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindHexFromString
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToGBK
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ReadShow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[85]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32lib_include.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[7c]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32lib_include.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
</UL>

<P><STRONG><a name="[17f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32lib_include.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
</UL>

<P><STRONG><a name="[7d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32lib_include.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_InitAll
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitList
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
</UL>

<P><STRONG><a name="[180]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32lib_include.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.RCC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RCC_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.RTCAlarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTCAlarm_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>RegServer_Connect</STRONG> (Thumb, 38 bytes, Stack size 104 bytes, main.o(i.RegServer_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = RegServer_Connect &rArr; GPRS_Connect &rArr; GPRS_CommandAck &rArr; GPRS_CommandAckCount &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FmtToBuf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoReg
</UL>

<P><STRONG><a name="[12c]"></a>Reg_SendHead</STRONG> (Thumb, 94 bytes, Stack size 112 bytes, main.o(i.Reg_SendHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Reg_SendHead &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoReg
</UL>

<P><STRONG><a name="[12d]"></a>Reg_SendInfor</STRONG> (Thumb, 456 bytes, Stack size 336 bytes, main.o(i.Reg_SendInfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Reg_SendInfor &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCoppy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SaveConfigs
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBigShow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PragmDateTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCodeStr16
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoReg
</UL>

<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI1_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI2_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI3_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32lib_include.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[12f]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_StdRead
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read
</UL>

<P><STRONG><a name="[131]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, main.o(i.SPI_FLASH_BufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_StdWrite
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Record
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_HistoryRecord
</UL>

<P><STRONG><a name="[4e]"></a>SPI_FLASH_Init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, main.o(i.SPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_FLASH_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.DeviceMount_W25Q16)
</UL>
<P><STRONG><a name="[132]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.SPI_FLASH_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[137]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.SPI_FLASH_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_EraseThis
</UL>

<P><STRONG><a name="[130]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>

<P><STRONG><a name="[136]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.SPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[135]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[138]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32lib_include.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[13a]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32lib_include.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[139]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32lib_include.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[133]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32lib_include.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32lib_include.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>Save_AppConfig</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, appconfig.o(i.Save_AppConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Save_AppConfig &rArr; Save_VoidConfig &rArr; Tools_GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_VoidConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SaveConfigs
</UL>

<P><STRONG><a name="[13c]"></a>Save_VoidConfig</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, appconfig.o(i.Save_VoidConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Save_VoidConfig &rArr; Tools_GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tools_GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_AppConfig
</UL>

<P><STRONG><a name="[5c]"></a>Sensor_Command</STRONG> (Thumb, 1260 bytes, Stack size 232 bytes, main.o(i.Sensor_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Sensor_Command &rArr; COM_Menu_Load &rArr; MUI_GetOptionString &rArr; FmtToBuf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearWithBuffer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Expend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_CreateMsg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug_SetType
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIndex
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FlashSize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCoppy
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FmtToBuf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float32ToByte
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float32FromByte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SaveConfigs
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PrintfHistory
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CleanHistory
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_SetDateTime
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ht1621_ShowASCII
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Load
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Enter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>Sensor_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i.Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Sensor_Init &rArr; DHT11_Read &rArr; DHT11_GetFloat &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTH11_SetPort
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_SetPort
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPlan
</UL>

<P><STRONG><a name="[12a]"></a>StrToGBK</STRONG> (Thumb, 204 bytes, Stack size 544 bytes, main.o(i.StrToGBK))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = StrToGBK &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexFromString
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
</UL>

<P><STRONG><a name="[108]"></a>StringCoppy</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, text.o(i.StringCoppy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StringCoppy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendMsg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendHeartbeat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUI_GetOptionString
</UL>

<P><STRONG><a name="[be]"></a>StringEndingAppend</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, text.o(i.StringEndingAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>

<P><STRONG><a name="[97]"></a>Strstr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, text.o(i.Strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mon
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckTwo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Ack
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Enter
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32lib_include.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTick_Handler &rArr; Tos_SysTick &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_SysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32lib_include.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>System_Reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.System_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = System_Reset &rArr; Task_Join &rArr; Tos_TaskPutQmsg &rArr; BufferCoppy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Join
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>System_ResetDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.System_ResetDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = System_ResetDelay &rArr; Tos_TaskDelay &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.System_Reset)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TAMPER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TAMPER_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>TFT_RGB</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, text.o(i.TFT_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUI_GetOptionString
</UL>

<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM1_BRK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM1_BRK_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM1_CC_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM1_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM1_TRG_COM_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM1_UP_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM4_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM5_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM7_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM8_BRK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM8_BRK_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM8_CC_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM8_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM8_TRG_COM_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM8_UP_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>Task0</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, main.o(i.Task0))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Task0 &rArr; Task0_Init &rArr; Printf_SysInfor &rArr; Printf_LockCode &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>Task0_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.Task0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Task0_Init &rArr; Printf_SysInfor &rArr; Printf_LockCode &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug_SetType
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug_OutSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_SysInfor
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_LoadConfigs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0
</UL>

<P><STRONG><a name="[12e]"></a>TaskBigShow</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.TaskBigShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TaskBigShow &rArr; Tos_TaskDelay &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
</UL>

<P><STRONG><a name="[5d]"></a>TaskPlan</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, main.o(i.TaskPlan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TaskPlan &rArr; ISL1208_Init &rArr; ISL1208_SetAlarm &rArr; ISL1208_WriteReg &rArr; I2C_WriteDatas &rArr; I2C_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Record
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Plan
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISL1208_GetDateTime
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read_Value
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>Task_Arrary</STRONG> (Thumb, 108 bytes, Stack size 200 bytes, func_face.o(i.Task_Arrary))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Task_Arrary &rArr; Tos_TaskGetQMsg &rArr; Tos_TaskStop &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskGetQMsg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskCreateQmsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>Task_AutoReg</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(i.Task_AutoReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Task_AutoReg &rArr; Reg_SendInfor &rArr; USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendHead
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegServer_Connect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_LoadConfigs
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[144]"></a>Task_CleanHistory</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.Task_CleanHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Task_CleanHistory &rArr; W25Q16_EraseThis &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug_Get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug_Drop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_EraseThis
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[60]"></a>Task_HistoryRecord</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, main.o(i.Task_HistoryRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Task_HistoryRecord &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>Task_Join</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, func_face.o(i.Task_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Task_Join &rArr; Tos_TaskPutQmsg &rArr; BufferCoppy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskPutQmsg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset
</UL>

<P><STRONG><a name="[59]"></a>Task_LoadConfigs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.Task_LoadConfigs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Task_LoadConfigs &rArr; BOOL_LoadConfigs &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_LoadConfigs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>Task_M26</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, main.o(i.Task_M26))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = Task_M26 &rArr; QuectelM26_ShowSMS &rArr; QuectelM26_SendTextMsg &rArr; GBKToUniCode &rArr; GetUnicodeString &rArr; GetStringByFmt &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendMsg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoReg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendHeartbeat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_InitSMS
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetCSQ
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Connect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDU_GetCenterNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>Task_Plan</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, main.o(i.Task_Plan))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Task_Plan &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowPoolFilter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPlan
</UL>

<P><STRONG><a name="[143]"></a>Task_PrintfHistory</STRONG> (Thumb, 150 bytes, Stack size 80 bytes, main.o(i.Task_PrintfHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Task_PrintfHistory &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug_Get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug_Drop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[14e]"></a>Task_Record</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, main.o(i.Task_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Task_Record &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPlan
</UL>

<P><STRONG><a name="[58]"></a>Task_SaveConfigs</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.Task_SaveConfigs))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Task_SaveConfigs &rArr; Save_AppConfig &rArr; Save_VoidConfig &rArr; Tools_GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_AppConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>Task_SendMsg</STRONG> (Thumb, 476 bytes, Stack size 248 bytes, main.o(i.Task_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = Task_SendMsg &rArr; QuectelM26_SendTextMsg &rArr; GBKToUniCode &rArr; GetUnicodeString &rArr; GetStringByFmt &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCoppy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
</UL>

<P><STRONG><a name="[e5]"></a>ToHex64</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, text.o(i.ToHex64))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCodeStr16
</UL>

<P><STRONG><a name="[107]"></a>Tools_GetCRC16</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, cheakout.o(i.Tools_GetCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Tools_GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Expend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_CreateMsg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_VoidConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_VoidConfig
</UL>

<P><STRONG><a name="[b4]"></a>Tools_GetCRC8</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, cheakout.o(i.Tools_GetCRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Tools_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temp
</UL>

<P><STRONG><a name="[10b]"></a>Tools_GetXOR8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cheakout.o(i.Tools_GetXOR8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tools_GetXOR8
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Expend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_CreateMsg
</UL>

<P><STRONG><a name="[15b]"></a>Tos_ComputeCPURate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tos.o(i.Tos_ComputeCPURate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tos_ComputeCPURate &rArr; FlowPoolFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowPoolFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_SysTick
</UL>

<P><STRONG><a name="[15c]"></a>Tos_Init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tos.o(i.Tos_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tos_Init &rArr; Tos_TimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mema_Malloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_ListCreate
</UL>

<P><STRONG><a name="[15e]"></a>Tos_ListCreate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos.o(i.Tos_ListCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = Tos_ListCreate &rArr; Tos_TaskCreateFindID &rArr; Tos_TaskCreate &rArr; Tos_TaskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskCreateFindID
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_Start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>Tos_RootTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tos.o(i.Tos_RootTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Tos_RootTask &rArr; Device_Init &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TimerExecute
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos.o(i.Tos_Start)
</UL>
<P><STRONG><a name="[160]"></a>Tos_Start</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tos.o(i.Tos_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = Tos_Start &rArr; Tos_TaskCreate &rArr; Tos_TaskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskStart
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_ListCreate
</UL>

<P><STRONG><a name="[14a]"></a>Tos_SysTick</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tos.o(i.Tos_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Tos_SysTick &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskReady
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_ComputeCPURate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[162]"></a>Tos_TaskCreate</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tos.o(i.Tos_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Tos_TaskCreate &rArr; Tos_TaskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mema_Malloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskTcbInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskStackInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskCreateFindID
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_Start
</UL>

<P><STRONG><a name="[15f]"></a>Tos_TaskCreateFindID</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, tos.o(i.Tos_TaskCreateFindID))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Tos_TaskCreateFindID &rArr; Tos_TaskCreate &rArr; Tos_TaskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_ListCreate
</UL>

<P><STRONG><a name="[150]"></a>Tos_TaskCreateQmsg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tos.o(i.Tos_TaskCreateQmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tos_TaskCreateQmsg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Arrary
</UL>

<P><STRONG><a name="[da]"></a>Tos_TaskDelay</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tos.o(i.Tos_TaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tos_TaskDelay &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BareDelay
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Arrary
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_RootTask
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_EraseThis
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendMsg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PrintfHistory
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_M26
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_HistoryRecord
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPlan
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBigShow
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_ResetDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendHeartbeat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_InitSMS
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Connect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAckCount
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
</UL>

<P><STRONG><a name="[181]"></a>Tos_TaskDropDev</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_device.o(i.Tos_TaskDropDev))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
</UL>

<P><STRONG><a name="[169]"></a>Tos_TaskGetDev</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tos_device.o(i.Tos_TaskGetDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Tos_TaskGetDev &rArr; Tos_WaitDev &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_WaitDev
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
</UL>

<P><STRONG><a name="[151]"></a>Tos_TaskGetQMsg</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tos.o(i.Tos_TaskGetQMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Tos_TaskGetQMsg &rArr; Tos_TaskStop &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskStop
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Arrary
</UL>

<P><STRONG><a name="[157]"></a>Tos_TaskPutQmsg</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, tos.o(i.Tos_TaskPutQmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Tos_TaskPutQmsg &rArr; BufferCoppy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskRecover
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Join
</UL>

<P><STRONG><a name="[164]"></a>Tos_TaskReady</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, tos.o(i.Tos_TaskReady))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_SysTick
</UL>

<P><STRONG><a name="[16c]"></a>Tos_TaskRecover</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tos.o(i.Tos_TaskRecover))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskPutQmsg
</UL>

<P><STRONG><a name="[16d]"></a>Tos_TaskRun</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tos.o(i.Tos_TaskRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOS_ContextSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskSwitch
</UL>

<P><STRONG><a name="[166]"></a>Tos_TaskStackInit</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, tos.o(i.Tos_TaskStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Tos_TaskStackInit
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskCreate
</UL>

<P><STRONG><a name="[163]"></a>Tos_TaskStart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tos.o(i.Tos_TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Tos_TaskStart
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOS_SwitchToTask
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_Start
</UL>

<P><STRONG><a name="[16b]"></a>Tos_TaskStop</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tos.o(i.Tos_TaskStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tos_TaskStop &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskGetQMsg
</UL>

<P><STRONG><a name="[170]"></a>Tos_TaskSuspend</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, tos.o(i.Tos_TaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tos_TaskSuspend &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
</UL>

<P><STRONG><a name="[167]"></a>Tos_TaskSwitch</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tos.o(i.Tos_TaskSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskRun
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskSuspend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_WaitDev
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskStop
</UL>

<P><STRONG><a name="[165]"></a>Tos_TaskTcbInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos.o(i.Tos_TaskTcbInit))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskCreate
</UL>

<P><STRONG><a name="[173]"></a>Tos_TaskTimeout</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tos.o(i.Tos_TaskTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tos_TaskTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>Tos_TimerCreate</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tos_timer.o(i.Tos_TimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tos_TimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_Init
</UL>

<P><STRONG><a name="[171]"></a>Tos_TimerDelete</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tos_timer.o(i.Tos_TimerDelete))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TimerExecute
</UL>

<P><STRONG><a name="[161]"></a>Tos_TimerExecute</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tos_timer.o(i.Tos_TimerExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tos_TimerExecute
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TimerDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_RootTask
</UL>

<P><STRONG><a name="[55]"></a>Tos_TimerScan</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tos_timer.o(i.Tos_TimerScan))
<BR>[Address Reference Count : 1]<UL><LI> tos.o(i.Tos_Init)
</UL>
<P><STRONG><a name="[16a]"></a>Tos_WaitDev</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tos.o(i.Tos_WaitDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tos_WaitDev &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskGetDev
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart_driver.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskTimeout
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usart_driver.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskTimeout
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usart_driver.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskTimeout
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32lib_include.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigurationAll
</UL>

<P><STRONG><a name="[174]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32lib_include.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32lib_include.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigurationAll
</UL>

<P><STRONG><a name="[4b]"></a>USART_Configuration</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usart_driver.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USART_Configuration &rArr; USART_ConfigurationAll &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTypeDef
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigurationAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_driver.o(i.DeviceMount_Usart)
</UL>
<P><STRONG><a name="[177]"></a>USART_ConfigurationAll</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, usart_driver.o(i.USART_ConfigurationAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART_ConfigurationAll &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[176]"></a>USART_GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, usart_driver.o(i.USART_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_GPIO_Init &rArr; USART_GPIO_InitAll &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_InitAll
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[17e]"></a>USART_GPIO_InitAll</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, usart_driver.o(i.USART_GPIO_InitAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_GPIO_InitAll &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
</UL>

<P><STRONG><a name="[172]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32lib_include.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>USART_GetIndex</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart_driver.o(i.USART_GetIndex))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMount_Usart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
</UL>

<P><STRONG><a name="[175]"></a>USART_GetTypeDef</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart_driver.o(i.USART_GetTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[179]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32lib_include.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigurationAll
</UL>

<P><STRONG><a name="[178]"></a>USART_Init</STRONG> (Thumb, 208 bytes, Stack size 52 bytes, stm32lib_include.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigurationAll
</UL>

<P><STRONG><a name="[4d]"></a>USART_Read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, usart_driver.o(i.USART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = USART_Read &rArr; USART_ReadDatas &rArr; Tos_TaskGetDev &rArr; Tos_WaitDev &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadDatas
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_driver.o(i.DeviceMount_Usart)
</UL>
<P><STRONG><a name="[d7]"></a>USART_ReadDatas</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usart_driver.o(i.USART_ReadDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = USART_ReadDatas &rArr; Tos_TaskGetDev &rArr; Tos_WaitDev &rArr; Tos_TaskSwitch &rArr; Tos_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskSuspend
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskGetDev
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDropDev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIndex
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCoppy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Read
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ReadShow
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetValue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetNumString
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAckCount
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckTwo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_AckDelay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Ack
</UL>

<P><STRONG><a name="[4c]"></a>USART_Write</STRONG> (Thumb, 32 bytes, Stack size 28 bytes, usart_driver.o(i.USART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART_Write &rArr; USART_WriteDatas
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_driver.o(i.DeviceMount_Usart)
</UL>
<P><STRONG><a name="[128]"></a>USART_WriteData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart_driver.o(i.USART_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
</UL>

<P><STRONG><a name="[93]"></a>USART_WriteDatas</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart_driver.o(i.USART_WriteDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_WriteDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Command
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendHead
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendHeartbeat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Menu_Enter
</UL>

<P><STRONG><a name="[de]"></a>USART_WriteLine</STRONG> (Thumb, 54 bytes, Stack size 232 bytes, usart_driver.o(i.USART_WriteLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USART_WriteLine &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextLength
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteDatas
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendInfor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_SendHead
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ShowSMS
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendTextMsg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendHeartbeat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_SendCFG
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_ReadShow
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetValue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuectelM26_GetNumString
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Connect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CommandAckCount
</UL>

<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32lib_include.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBWakeUp_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32lib_include.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[154]"></a>W25Q16_EraseThis</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, main.o(i.W25Q16_EraseThis))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = W25Q16_EraseThis &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_TaskDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CleanHistory
</UL>

<P><STRONG><a name="[156]"></a>W25Q16_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.W25Q16_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q16_Read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PrintfHistory
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_HistoryRecord
</UL>

<P><STRONG><a name="[50]"></a>W25Q16_StdRead</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.W25Q16_StdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q16_StdRead &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.DeviceMount_W25Q16)
</UL>
<P><STRONG><a name="[4f]"></a>W25Q16_StdWrite</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.W25Q16_StdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W25Q16_StdWrite &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.DeviceMount_W25Q16)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_driver.o(i.WWDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WWDG_IRQHandler &rArr; DeBug &rArr; StringEndingAppend &rArr; GetTextLength
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19c]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[19d]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[19e]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[bc]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteLine
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeBug
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringByFmt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FmtToBuf
</UL>

<P><STRONG><a name="[19f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f4]"></a>delay_us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c_driver.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendBytes
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvBytes
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = main &rArr; Tos_ListCreate &rArr; Tos_TaskCreateFindID &rArr; Tos_TaskCreate &rArr; Tos_TaskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMount_Usart
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tos_ListCreate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mema_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceList_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMount_W25Q16
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMount_ISL1208
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMount_IO
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[146]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32lib_include.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[147]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, stm32lib_include.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[7b]"></a>ADC1_GPIO_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.ADC1_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC1_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[80]"></a>ADC1_Mode_Config</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, main.o(i.ADC1_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ADC1_Mode_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[184]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[183]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[187]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[186]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[57]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
